#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('cachedgoose-example:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort('3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app)
const io = require('socket.io')(server)
/**
 * Listen on provided port, on all network interfaces.
 */

const mongoose = require('mongoose');

 

mongoose.Promise = global.Promise;

// Connect MongoDB at default port 27017.
mongoose.connect('mongodb://localhost:27017/testing', {
  useNewUrlParser: true,
  useCreateIndex: true,
}, (err) => {
  if (!err) {
    console.log('MongoDB Connection Succeeded.')
    let redis = require('redis');
    let redisAdapter = require('socket.io-redis'); 
    module.exports = function (io) {
      let pub = redis.createClient(6379, 'localhost', {
          detect_buffers: true,
          return_buffers: true
      });
  
      let sub = redis.createClient(6379, 'localhost', {
          detect_buffers: true,
          return_buffers: true
      });
  
      io.adapter(redisAdapter({
          pubClient: pub,
          subClient: sub
      }));
  
      io.on('connection', () => {
         // console.log(client.id);
          console.log("không thấy đâu cả")
        });

      }
    // io.on('connection', client => {
    //   console.log(client.id)
    //   client.on('connect', (e) => console.log({ e }))
    //   client.on('event', data => { console.log('EVENT HANDLER') });
    //   client.on('disconnect', () => { console.log('DISCONNECTED') });
    // });

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  } else {
    console.log('Error in DB connection: ' + err)
  }
});



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
